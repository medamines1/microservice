apiVersion: v1
kind: Service
metadata:
  name: company-category-service
  labels:
    run: company-category-service
spec:
  type: NodePort
  ports:
  - port: 8100
  externalIPs:
    - 10.20.0.170
  selector:
    app : company-category-microservice
---



apiVersion: apps/v1
kind: Deployment
metadata:
  name: company-category-microservice
spec:
  selector:
      matchLabels:
        app: company-category-microservice
  replicas: 1
  template:
    metadata:
      labels:
        app: company-category-microservice
    spec:
      containers:
        - name: mypostgres
          image: index.docker.io/proxymicros/angular:mypostgres
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            - name  :  POSTGRES_USER
              value : postgres
            - name  : POSTGRES_PASSWORD
              value : new
            - name : POSTGRES_DB
              value : mydb
          volumeMounts:
             - mountPath: /var/lib/postgresql/data
               name: postgres-pv-claim
        - name: company-category-microservice
          image: index.docker.io/proxymicros/angular:company_category_microservice 
          imagePullPolicy: Always
          ports:
            - containerPort: 8100
          env:
          - name: auth-server-url
            value: "http://$(KEYCLOAK_SERVICE_HOST):$(KEYCLOAK_SERVICE_PORT)"
          - name: keycloak-host
            value: "http://$(KEYCLOAK_SERVICE_HOST):$(KEYCLOAK_SERVICE_PORT)"
          - name: auth-port
            value: "8081"
          - name: SPRING_DATASOURCE_PASSWORD
            value: new
          - name: SPRING_DATASOURCE_URL
            value: jdbc:postgresql://localhost:5432/postgres?currentSchema=public
          - name: SPRING_DATASOURCE_USERNAME
            value: postgres
      imagePullSecrets:
        - name: myregistrykey
      volumes:
      - name: postgres-pv-claim
        persistentVolumeClaim:
          claimName: company-postgres-pv-claim
